import { Map } from 'immutable';
import { Observable } from 'rxjs';
import { IWarixReducerHandler, IWarixStateAction, IWarixStatePostAction, WarixStateActionReducer, WarixStateDataReducer, WarixStateProxy } from './include';
export declare const GLOBAL_SYMBOL: unique symbol;
export declare class WarixState {
    private readonly dispatcher$;
    private readonly postAction$;
    private readonly state$;
    private readonly preProcessors;
    private readonly processors;
    readonly source$: Observable<Map<string, any>>;
    readonly actions$: Observable<IWarixStateAction>;
    readonly postActions$: Observable<IWarixStatePostAction>;
    constructor(initialState?: Map<string, any>);
    private validateSingleInstance;
    private coerceValueType;
    private getList;
    private reduceAction;
    private reduceData;
    private initScanner;
    private initDefaultHandlers;
    complete(): void;
    registerPreProcessor(forType: string, reducer: WarixStateActionReducer): IWarixReducerHandler;
    registerGlobalPreProcessor(reducer: WarixStateActionReducer): IWarixReducerHandler;
    registerProcessor(forType: string, reducer: WarixStateDataReducer): IWarixReducerHandler;
    registerGlobalProcessor(reducer: WarixStateDataReducer): IWarixReducerHandler;
    dispatch(action: string, payload: any): this;
    dispatch(action: IWarixStateAction): this;
    peek(): Map<string, any>;
    peekKey(key: string | string[]): any;
    select<T = any>(path: string | string[]): Observable<T>;
    selectMap<T = any, M = any>(path: string | string[], mapping: (value: T) => M): Observable<M>;
    on(actionType: string): Observable<IWarixStateAction>;
    set(value: Map<string, any>): this;
    setIn(path: string | string[], value: any): this;
    patch(path: string | string[], value: any): void;
    apply(path: string | string[], operation: (value: any) => any): this;
    listPush(path: string | string[], items: any[]): this;
    listPop(path: string | string[]): this;
    listShift(path: string | string[]): this;
    listUnshift(path: string | string[], items: any[]): this;
    listSplice(path: string | string[], index: number, deleteCount?: number, items?: any[]): this;
    listSort<T = any>(path: string | string[], compareFn?: (a: T, b: T) => number): this;
    subHandler(path: string | string[]): WarixStateProxy;
}
